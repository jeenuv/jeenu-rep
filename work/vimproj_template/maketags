#!/bin/bash

PROGNAME="$(basename $0)"
THISDIR="$(readlink -f "$(dirname "$0")")"

function script_echo()
{
    echo "$PROGNAME: $@"
}

function buildfiles()
{
    local taglist="${LIST[$1]}"
    local tagdirs="${DIRS[$1]}"
    local tagdirs_flat="${DIRS_FLAT[$1]}"
    local files="${FILES[$1]}"
    local findexpr="${FINDEXPR[$1]}"
    local build=0

    if [ -f "$taglist" ]; then
        if confirm "delete and remake $taglist"; then
            rm "$taglist"
            build=1
        fi
    else
        build=1
    fi

    if [ "$build" = 1 ]; then
        script_echo "building list of files"
        : > "$taglist"
        [ "$tagdirs_flat" ] &&
            find $(eval echo $tagdirs_flat) -maxdepth 1 \( -name .svn -o -name .git \) -prune -o \( -type f -a \( $findexpr \) \) -print >> "$taglist"
        [ "$tagdirs" ] &&
            find $(eval echo $tagdirs) \( -name .svn -o -name .git \) -prune -o \( -type f -a \( $findexpr \) \) -print >> "$taglist"
        # Iterate over files and append each of them in a separate line
        if [ "$files" ]; then
            for file in $(eval echo $files); do
                echo $file >> "$taglist"
            done
        fi
    fi
}

cd "$THISDIR"

[ -f initrc ] && source initrc

if [ "${PROJECT_ROOT:0:1}" != "/" ]; then
    script_echo "\$PROJECT_ROOT is not absolute"
    exit 1
elif [ -z "$PROJECT_ROOT" ] || [ ! -d "$PROJECT_ROOT" ]; then
    script_echo "PROJECT_ROOT '$PROJECT_ROOT' is not accessible"
    exit 1
else
    script_echo "using \$PROJECT_ROOT as $PROJECT_ROOT"
fi

for index in "${!NAME[@]}"; do
    if confirm "build tag '${NAME[$index]}'"; then
        buildfiles "$index"

        # Delete the tag file if already existing
        [ -f "${FILENAME[$index]}" ] && rm "${FILENAME[$index]}"

        script_echo "building tag '${NAME[$index]}'"
        if ctags -L "${LIST[$index]}" \
            -o "${FILENAME[$index]}" \
            $CTAGS_ARGS \
            --extra=+f; then
            script_echo "finished building tag '${NAME[$index]}'"
        else
            script_echo "error building tag '${NAME[$index]}'"
        fi
    elif [ $CONFIRMED = "quit" ]; then
        exit
    fi
done

## CSCOPE setup

NAME[2]="main"
FILENAME[2]="${NAME[2]}.cscope"
LIST[2]="${NAME[2]}.list"
FINDEXPR[2]="${FINDEXPR[0]}"
DIRS[2]="${DIRS[0]}"

if confirm "build cscope"; then
    buildfiles 2

    for program in cscope mlcscope ""; do
        which $program &>/dev/null && break
    done

    if [ -z "$program" ]; then
        script_echo "No CScope program found"
    else
        if $program -b -q -k -i "${LIST[2]}" -f "${FILENAME[2]}"; then
            script_echo "cscope db built"
        else
            script_echo "error building cs db"
        fi
    fi
fi

## Generate VIMRC

# Generate vimrc. Escape spaces. $PROJECT_LISTS would be provided by 'vimproj'
cat <<EOF > vimrc.generated
set grepprg=xargs\ grep\ -nH\ \$*\ <\ <(cat\ \$PROJECT_LISTS)
EOF
