#!/bin/bash

# Indicate that the bookmarks are not changed
CHANGED_BM=0

# Default bookmark profile
PROFILE_BM="$HOME/.book"

# Read the bookmarks
function bmread()
{
    if [ "$CHANGED_BM" -ne 0 ]; then
        echo "bmread: There are new bookmarks. Identical bookmarks will be overwritten when reading."
        if ! confirm "You want to continue?"; then
            return 1
        fi
    fi

    # Sanity check
    if [ "$(cat "$PROFILE_BM" | sed '1q')" != "#BOOKMARK" ]; then
        echo "bmread: Invalid bookmark profile"
        return 1
    fi

    # Check for templated file
    if cat "$PROFILE_BM" | grep -q '\$TEMPLATE_BM'; then
        # If it's templated, check for $TEMPLATE_BM
        bmtemplate
        if ! confirm "bmread: Are you sure you want to continue?"; then
            return 1;
        fi
    fi

    unset ${!bm_*}
    source "$PROFILE_BM"
    if [ -n "${!bm_*}" ]; then
        export ${!bm_*}
    fi
    TS_BM=$(stat -c %Y "$PROFILE_BM")
    CHANGED_BM=0
    return 0
}

function bm()
{
    if [ "$#" -eq 0 ]; then
        echo "Usage: bm [-r] bookmark-name"
        return 1
    fi

    local opt="-r"

    if [ "$#" -gt 0 -a "$1" = "$opt" ]; then
        if [ -z "$2" ]; then
            echo "bm: Argument required: bookmark name"
            return 1
        fi

        if [ -z "$(eval echo \${bm_$2})" ]; then
            echo "bm: Bookmark not defined: $2"
            return
        else
            unset bm_$2
            CHANGED_BM=1
        fi
    else
        if { echo "$1" | GREP_OPTIONS= grep '^[0-9]' || echo "$1" | GREP_OPTIONS= grep '[^0-9A-Za-z_]'; } > /dev/null; then
            echo "bm: Invalid bookmark name"
            return
        fi

        if [ -n "$(eval echo \${bm_$1})" ]; then
            # if bookmark is already defined
            REPLY=
            if confirm "bm: Bookmark '$1' already defined. overwrite?"; then
                export bm_$1="$(pwd -P)"
                CHANGED_BM=1
            else
                echo "bm: Bookmark discarded"
            fi
        else
            export bm_$1="$(pwd -P)"
            CHANGED_BM=1
        fi
    fi
}

function go()
{
    local dir

    if [ "$#" -lt 1 ]; then
        echo "go where?"
        echo
        bms
        return
    fi

    if [ -z "$(eval echo \${bm_$1})" ]; then
        echo "go: Bookmark not defined: $1"
        return
    else
        # What if that directory got deleted after it was bookmarked. If that's the case
        # we don't want an error from bash
        dir="$(eval echo \${bm_$1})"
        if [ -d "$dir" ]; then
            cd "$dir"
        else
            echo "go: Bookmark $1 is invalid: $dir"
        fi
    fi
}

function bms()
{
    local i

    if [ "$#" -ne 0 ]; then
        echo "bms: No arguments accepted"
        return
    fi

    printf "%-20s %s\n%-20s %s\n" Bookmark Location ========== ==========
    for i in ${!bm_*}; do
        printf "%-20s %s\n" "${i#bm_}" "$(eval "echo \$$i")"
    done
}

function bmwrite()
{
    local template=0
    local i
    local val

    if [ "$(stat -c %Y "$PROFILE_BM")" -gt "$TS_BM" ]; then
        # Bookmark file has been written by some one else, since the time we read it.
        # This means that there are new bookmarks defined. So better read them
        echo "bmwrite: The bookmark file is more recent than when you read it. It'll be re-read before writing"
        bmread
        if [ $? -ne 0 ]; then
            return
        fi
    fi

    if [ -n "$TEMPLATE_BM" ]; then
        template=1
    fi

    if [ "$CHANGED_BM" -ne 0 ]; then
        echo "#BOOKMARK" > "$PROFILE_BM"
        for i in ${!bm_*}; do
            val=$(eval "echo \$$i")
            if [ "$template" -eq 1 ]; then
                val="$(echo "$val" | sed "s#$TEMPLATE_BM#\$TEMPLATE_BM#")"
            fi

            echo "$i=\"$val\"" >> "$PROFILE_BM"
        done

        echo "bmwrite: Bookmarks saved"
        CHANGED_BM=0
        TS_BM=$(stat -c %Y "$PROFILE_BM")
    else
        echo "bmwrite: No bookmark changes"
    fi
}

function bmprofile()
{
    local old_profile
    local arg="$1"

    if [ "$#" -eq 0 -o -z "$1" ]; then
        echo "bmprofile: Your current bookmark profile is '$PROFILE_BM'"
        return
    fi

    if [ "${arg:0:1}" != "/" ]; then
        # The file name is a relative path; so get the absolute path
        arg="$( (cd -P $(dirname "$arg") && pwd) )/$(basename "$arg")"
    fi

    old_profile="$PROFILE_BM"

    if [ -e "$arg" ]; then
        if [ -d "$arg" ]; then
            echo "bmprofile: '$arg' is a directory"
            return 1
        fi
    else
        if confirm "bmprofile: $arg doesn't exist; you want to create it?"; then
            echo "#BOOKMARK" > "$arg"
        else
            return 1
        fi
    fi

    PROFILE_BM="$arg"

    if ! bmread; then
        PROFILE_BM="$old_profile"
        echo "bmprofile: Old bookmark profile restored"
    fi
}

function bmtemplate()
{
    if [ $# -eq 0 ]; then
        if [ -n "$TEMPLATE_BM" ]; then 
            echo "bmtemplate: Your current bookmark template is '$TEMPLATE_BM'"
        else
            echo "bmtemplate: You haven't set a bookmark template"
        fi

        return
    elif [ -z "$1" ]; then
        echo "bmtemplate: Bookmark template unset"
        TEMPLATE_BM=
    else
        export TEMPLATE_BM="$1"
        if [ "${1:0:1}" != "/" ]; then
            echo "bmtemplate: Argument should be an absolute path"
            return 1
        fi

        echo "bmtemplate: Template set to $TEMPLATE_BM"
    fi

    return 0
}

function _bm_complete()
{
    local BKMS CUR

    COMPREPLY=()
    CUR=${COMP_WORDS[$COMP_CWORD]}

    if [ \( "${COMP_WORDS[0]}" = "go" -a "$COMP_CWORD" -eq 1 \) -o \( "${COMP_WORDS[0]}" = "bm" -a "$COMP_CWORD" -eq 2 \) ]; then
        BKMS="$(for i in ${!bm_*}; do echo "${i#bm_}"; done)"
        COMPREPLY=($(compgen -W "$BKMS" $CUR))
    fi
}

complete -F _bm_complete go
complete -F _bm_complete bm
complete -o dirnames bmtemplate
